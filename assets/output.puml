@startuml
skinparam classAttributeIconSize 0
class Kiosk{
- state : State
- course : Course
- student : Student
studentsRepository : StudentsRepository
coursesRepository : CoursesRepository
creditCardsRepository : CreditCardsRepository
ticketsRepository : TicketsRepository
- scanner : Scanner
+ Kiosk(studentsRepository : StudentsRepository, coursesRepository : CoursesRepository, creditCardsRepository : CreditCardsRepository, ticketsRepository : TicketsRepository)
+ start() : void
+ execute() : void
+ identifyStudent() : void
+ selectCourse() : void
+ payment() : void
+ generateTicket() : void
+ restart() : void
+ reset() : void
+ getStudent() : Student
+ setStudent(student : Student) : void
+ getState() : State
+ setState(state : State) : void
+ getCourse() : Course
+ setCourse(course : Course) : void
}
class Student{
- enrollment : String
- name : String
+ Student(enrollment : String, name : String)
+ getEnrollment() : String
+ getName() : String
}
class StudentsRepository{
- students : HashMap<String,Student>
+ StudentsRepository()
+ findStudent(enrollment : String) : Student
- loadStudents() : void
}
class CreditCard{
- number : String
- cvv : String
- expirationDate : String
- balance : double
- owner : String
+ CreditCard(number : String, cvv : String, expirationDate : String, balance : double, owner : String)
+ getNumber() : String
+ getCvv() : String
+ getExpirationDate() : String
+ getBalance() : double
+ setBalance(balance : double) : void
+ getOwner() : String
+ toString() : String
}
class CreditCardsRepository{
- creditCards : HashMap<String,CreditCard>
+ CreditCardsRepository()
+ findCreditCard(key : String) : CreditCard
+ getCreditCards() : HashMap<String,CreditCard>
- loadCreditCards() : void
}
class Main{
+ {static} main(args : String[]) : void
}
class Completed{
- context : Kiosk
+ Completed(context : Kiosk)
+ transitionTo(state : State) : void
+ identifyStudent(enrollment : String) : void
+ selectCourse(courseName : String) : void
+ payment(cardNumber : String, cvv : String, expirationDate : String, owner : String) : void
+ generateTicket() : Ticket
}
Completed ..|> State
class Processing{
- context : Kiosk
+ Processing(context : Kiosk)
+ transitionTo(state : State) : void
+ identifyStudent(enrollment : String) : void
+ selectCourse(courseName : String) : void
+ payment(cardNumber : String, cvv : String, expirationDate : String, owner : String) : void
+ generateTicket() : Ticket
}
Processing ..|> State
class Subscribed{
- context : Kiosk
+ Subscribed(context : Kiosk)
+ transitionTo(state : State) : void
+ identifyStudent(enrollment : String) : void
+ selectCourse(courseName : String) : void
+ payment(cardNumber : String, cvv : String, expirationDate : String, owner : String) : void
+ generateTicket() : Ticket
}
Subscribed ..|> State
class CoursesRepository{
- courses : HashMap<String,Course>
- slots : int
+ CoursesRepository()
+ findCourse(key : String) : Course
+ getCourses() : HashMap<String,Course>
- loadCourses() : void
+ getSlots() : int
}
class Course{
- name : String
- price : double
- slots : int
+ Course(name : String, price : double, slots : int)
+ getName() : String
+ getPrice() : double
+ getSlots() : int
ocuparVaga() : void
}
class OnHold{
- context : Kiosk
+ OnHold(context : Kiosk)
+ transitionTo(state : State) : void
+ identifyStudent(enrollment : String) : void
+ selectCourse(coursekey : String) : void
+ payment(cardNumber : String, cvv : String, expirationDate : String, owner : String) : void
+ generateTicket() : Ticket
}
OnHold ..|> State
class TicketsRepository{
- tickets : List<Ticket>
+ TicketsRepository()
+ addTicket(ticket : Ticket) : void
+ findTicketByOwnerEnrollment(ownerEnrollment : String) : Ticket
+ findTicketsByCourseName(courseName : String) : List<Ticket>
+ getTickets() : List<Ticket>
}
class Ticket{
- student : Student
- course : Course
+ Ticket(student : Student, course : Course)
+ getStudent() : Student
+ getCourse() : Course
+ toString() : String
}
class Identified{
- context : Kiosk
+ Identified(context : Kiosk)
+ transitionTo(state : State) : void
+ identifyStudent(enrollment : String) : void
+ selectCourse(courseKey : String) : void
+ payment(cardNumber : String, cvv : String, expirationDate : String, owner : String) : void
+ generateTicket() : Ticket
}
Identified ..|> State
Kiosk--"- state" State
Kiosk--"- course" Course
Kiosk--"- student" Student
Kiosk--"studentsRepository" StudentsRepository
Kiosk--"coursesRepository" CoursesRepository
Kiosk--"creditCardsRepository" CreditCardsRepository
Kiosk--"ticketsRepository" TicketsRepository
Completed--"- context" Kiosk
Processing--"- context" Kiosk
Subscribed--"- context" Kiosk
OnHold--"- context" Kiosk
Ticket--"- student" Student
Ticket--"- course" Course
Identified--"- context" Kiosk
interface State{
transitionTo(state : State) : void
identifyStudent(enrollment : String) : void
selectCourse(courseName : String) : void
payment(cardNumber : String, cvv : String, expirationDate : String, owner : String) : void
generateTicket() : Ticket
}
@enduml